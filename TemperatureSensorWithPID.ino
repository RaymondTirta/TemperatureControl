double targetTEMP = 24; 
char inputTEMP[2] ; 
double keypadTEMP = 0;
double outputPID;
double normalisasiPID;
unsigned long milli_time; 
float nilaiADC ;  
unsigned long rataADC; 
unsigned long CTexcel, CTdisplay, CTmeasure = 0;
unsigned long ITexcel = 1000;
unsigned long PTexcel = 0;
/*****************************
  SETUP UNTUK NILAI ADC VOLT
******************************/ 
#include <avr/pgmspace.h> //untuk menggunakan progmem diperlukan library ini.    
double hasilTEMP;
int voltPin = A0 ;    //Voltage reader pin 
const float ADC_TO_TEMP[1024] PROGMEM = {24.809, 24.8322, 24.8554, 24.8786, 24.9018, 24.925, 24.9482, 24.9714, 24.9946, 25.0178, 25.041, 25.0642, 25.0874, 25.1106, 25.1338, 25.157, 25.1802, 25.2034, 25.2266, 25.2498, 25.273, 25.2961, 25.3193, 25.3425, 25.3657, 25.3889, 25.4121, 25.4353, 25.4585, 25.4817, 25.5049, 25.5281, 25.5513, 25.5745, 25.5977, 25.6209, 25.6441, 25.6673, 25.6905, 25.7137, 25.7369, 25.7601, 25.7833, 25.8065, 25.8297, 25.8529, 25.8761, 25.8993, 25.9224, 25.9456, 25.9688, 25.992, 26.0152, 26.0384, 26.0616, 26.0848, 26.108, 26.1312, 26.1544, 26.1776, 26.2008, 26.224, 26.2472, 26.2704, 26.2936, 26.3168, 26.34, 26.3632, 26.3864, 26.4096, 26.4328, 26.456, 26.4792, 26.5024, 26.5255, 26.5487, 26.5719, 26.5951, 26.6183, 26.6415, 26.6647, 26.6879, 26.7111, 26.7343, 26.7575, 26.7807, 26.8039, 26.8271, 26.8503, 26.8735, 26.8967, 26.9199, 26.9431, 26.9663, 26.9895, 27.0127, 27.0359, 27.0591, 27.0823, 27.1055, 27.1287, 27.1518, 27.175, 27.1982, 27.2214, 27.2446, 27.2678, 27.291, 27.3142, 27.3374, 27.3606, 27.3838, 27.407, 27.4302, 27.4534, 27.4766, 27.4998, 27.523, 27.5462, 27.5694, 27.5926, 27.6158, 27.639, 27.6622, 27.6854, 27.7086, 27.7318, 27.755, 27.7781, 27.8013, 27.8245, 27.8477, 27.8709, 27.8941, 27.9173, 27.9405, 27.9637, 27.9869, 28.0101, 28.0333, 28.0565, 28.0797, 28.1029, 28.1261, 28.1493, 28.1725, 28.1957, 28.2189, 28.2421, 28.2653, 28.2885, 28.3117, 28.3349, 28.3581, 28.3813, 28.4044, 28.4276, 28.4508, 28.474, 28.4972, 28.5204, 28.5436, 28.5668, 28.59, 28.6132, 28.6364, 28.6596, 28.6828, 28.706, 28.7292, 28.7524, 28.7756, 28.7988, 28.822, 28.8452, 28.8684, 28.8916, 28.9148, 28.938, 28.9612, 28.9844, 29.0075, 29.0307, 29.0539, 29.0771, 29.1003, 29.1235, 29.1467, 29.1699, 29.1931, 29.2163, 29.2395, 29.2627, 29.2859, 29.3091, 29.3323, 29.3555, 29.3787, 29.4019, 29.4251, 29.4483, 29.4715, 29.4947, 29.5179, 29.5411, 29.5643, 29.5875, 29.6107, 29.6338, 29.657, 29.6802, 29.7034, 29.7266, 29.7498, 29.773, 29.7962, 29.8194, 29.8426, 29.8658, 29.889, 29.9122, 29.9354, 29.9586, 29.9818, 30.005, 30.0282, 30.0514, 30.0746, 30.0978, 30.121, 30.1442, 30.1674, 30.1906, 30.2138, 30.237, 30.2601, 30.2833, 30.3065, 30.3297, 30.3529, 30.3761, 30.3993, 30.4225, 30.4457, 30.4689, 30.4921, 30.5153, 30.5385, 30.5617, 30.5849, 30.6081, 30.6313, 30.6545, 30.6777, 30.7009, 30.7241, 30.7473, 30.7705, 30.7937, 30.8169, 30.8401, 30.8632, 30.8864, 30.9096, 30.9328, 30.956, 30.9792, 31.0024, 31.0256, 31.0488, 31.072, 31.0952, 31.1184, 31.1416, 31.1648, 31.188, 31.2112, 31.2344, 31.2576, 31.2808, 31.304, 31.3272, 31.3504, 31.3736, 31.3968, 31.42, 31.4432, 31.4664, 31.4895, 31.5127, 31.5359, 31.5591, 31.5823, 31.6055, 31.6287, 31.6519, 31.6751, 31.6983, 31.7215, 31.7447, 31.7679, 31.7911, 31.8143, 31.8375, 31.8607, 31.8839, 31.9071, 31.9303, 31.9535, 31.9767, 31.9999, 32.0231, 32.0463, 32.0695, 32.0927, 32.1158, 32.139, 32.1622, 32.1854, 32.2086, 32.2318, 32.255, 32.2782, 32.3014, 32.3246, 32.3478, 32.371, 32.3942, 32.4174, 32.4406, 32.4638, 32.487, 32.5102, 32.5334, 32.5566, 32.5798, 32.603, 32.6262, 32.6494, 32.6726, 32.6958, 32.719, 32.7421, 32.7653, 32.7885, 32.8117, 32.8349, 32.8581, 32.8813, 32.9045, 32.9277, 32.9509, 32.9741, 32.9973, 33.0205, 33.0437, 33.0669, 33.0901, 33.1133, 33.1365, 33.1597, 33.1829, 33.2061, 33.2293, 33.2525, 33.2757, 33.2989, 33.3221, 33.3452, 33.3684, 33.3916, 33.4148, 33.438, 33.4612, 33.4844, 33.5076, 33.5308, 33.554, 33.5772, 33.6004, 33.6236, 33.6468, 33.67, 33.6932, 33.7164, 33.7396, 33.7628, 33.786, 33.8092, 33.8324, 33.8556, 33.8788, 33.902, 33.9252, 33.9484, 33.9715, 33.9947, 34.0179, 34.0411, 34.0643, 34.0875, 34.1107, 34.1339, 34.1571, 34.1803, 34.2035, 34.2267, 34.2499, 34.2731, 34.2963, 34.3195, 34.3427, 34.3659, 34.3891, 34.4123, 34.4355, 34.4587, 34.4819, 34.5051, 34.5283, 34.5515, 34.5747, 34.5978, 34.621, 34.6442, 34.6674, 34.6906, 34.7138, 34.737, 34.7602, 34.7834, 34.8066, 34.8298, 34.853, 34.8762, 34.8994, 34.9226, 34.9458, 34.969, 34.9922, 35.0154, 35.0386, 35.0618, 35.085, 35.1082, 35.1314, 35.1546, 35.1778, 35.201, 35.2241, 35.2473, 35.2705, 35.2937, 35.3169, 35.3401, 35.3633, 35.3865, 35.4097, 35.4329, 35.4561, 35.4793, 35.5025, 35.5257, 35.5489, 35.5721, 35.5953, 35.6185, 35.6417, 35.6649, 35.6881, 35.7113, 35.7345, 35.7577, 35.7809, 35.8041, 35.8272, 35.8504, 35.8736, 35.8968, 35.92, 35.9432, 35.9664, 35.9896, 36.0128, 36.036, 36.0592, 36.0824, 36.1056, 36.1288, 36.152, 36.1752, 36.1984, 36.2216, 36.2448, 36.268, 36.2912, 36.3144, 36.3376, 36.3608, 36.384, 36.4072, 36.4304, 36.4535, 36.4767, 36.4999, 36.5231, 36.5463, 36.5695, 36.5927, 36.6159, 36.6391, 36.6623, 36.6855, 36.7087, 36.7319, 36.7551, 36.7783, 36.8015, 36.8247, 36.8479, 36.8711, 36.8943, 36.9175, 36.9407, 36.9639, 36.9871, 37.0103, 37.0335, 37.0567, 37.0798, 37.103, 37.1262, 37.1494, 37.1726, 37.1958, 37.219, 37.2422, 37.2654, 37.2886, 37.3118, 37.335, 37.3582, 37.3814, 37.4046, 37.4278, 37.451, 37.4742, 37.4974, 37.5206, 37.5438, 37.567, 37.5902, 37.6134, 37.6366, 37.6598, 37.6829, 37.7061, 37.7293, 37.7525, 37.7757, 37.7989, 37.8221, 37.8453, 37.8685, 37.8917, 37.9149, 37.9381, 37.9613, 37.9845, 38.0077, 38.0309, 38.0541, 38.0773, 38.1005, 38.1237, 38.1469, 38.1701, 38.1933, 38.2165, 38.2397, 38.2629, 38.2861, 38.3092, 38.3324, 38.3556, 38.3788, 38.402, 38.4252, 38.4484, 38.4716, 38.4948, 38.518, 38.5412, 38.5644, 38.5876, 38.6108, 38.634, 38.6572, 38.6804, 38.7036, 38.7268, 38.75, 38.7732, 38.7964, 38.8196, 38.8428, 38.866, 38.8892, 38.9124, 38.9355, 38.9587, 38.9819, 39.0051, 39.0283, 39.0515, 39.0747, 39.0979, 39.1211, 39.1443, 39.1675, 39.1907, 39.2139, 39.2371, 39.2603, 39.2835, 39.3067, 39.3299, 39.3531, 39.3763, 39.3995, 39.4227, 39.4459, 39.4691, 39.4923, 39.5155, 39.5387, 39.5618, 39.585, 39.6082, 39.6314, 39.6546, 39.6778, 39.701, 39.7242, 39.7474, 39.7706, 39.7938, 39.817, 39.8402, 39.8634, 39.8866, 39.9098, 39.933, 39.9562, 39.9794, 40.0026, 40.0258, 40.049, 40.0722, 40.0954, 40.1186, 40.1418, 40.1649, 40.1881, 40.2113, 40.2345, 40.2577, 40.2809, 40.3041, 40.3273, 40.3505, 40.3737, 40.3969, 40.4201, 40.4433, 40.4665, 40.4897, 40.5129, 40.5361, 40.5593, 40.5825, 40.6057, 40.6289, 40.6521, 40.6753, 40.6985, 40.7217, 40.7449, 40.7681, 40.7912, 40.8144, 40.8376, 40.8608, 40.884, 40.9072, 40.9304, 40.9536, 40.9768, 41, 41.0232, 41.0464, 41.0696, 41.0928, 41.116, 41.1392, 41.1624, 41.1856, 41.2088, 41.232, 41.2552, 41.2784, 41.3016, 41.3248, 41.348, 41.3712, 41.3944, 41.4175, 41.4407, 41.4639, 41.4871, 41.5103, 41.5335, 41.5567, 41.5799, 41.6031, 41.6263, 41.6495, 41.6727, 41.6959, 41.7191, 41.7423, 41.7655, 41.7887, 41.8119, 41.8351, 41.8583, 41.8815, 41.9047, 41.9279, 41.9511, 41.9743, 41.9975, 42.0207, 42.0438, 42.067, 42.0902, 42.1134, 42.1366, 42.1598, 42.183, 42.2062, 42.2294, 42.2526, 42.2758, 42.299, 42.3222, 42.3454, 42.3686, 42.3918, 42.415, 42.4382, 42.4614, 42.4846, 42.5078, 42.531, 42.5542, 42.5774, 42.6006, 42.6238, 42.6469, 42.6701, 42.6933, 42.7165, 42.7397, 42.7629, 42.7861, 42.8093, 42.8325, 42.8557, 42.8789, 42.9021, 42.9253, 42.9485, 42.9717, 42.9949, 43.0181, 43.0413, 43.0645, 43.0877, 43.1109, 43.1341, 43.1573, 43.1805, 43.2037, 43.2269, 43.2501, 43.2732, 43.2964, 43.3196, 43.3428, 43.366, 43.3892, 43.4124, 43.4356, 43.4588, 43.482, 43.5052, 43.5284, 43.5516, 43.5748, 43.598, 43.6212, 43.6444, 43.6676, 43.6908, 43.714, 43.7372, 43.7604, 43.7836, 43.8068, 43.83, 43.8532, 43.8764, 43.8995, 43.9227, 43.9459, 43.9691, 43.9923, 44.0155, 44.0387, 44.0619, 44.0851, 44.1083, 44.1315, 44.1547, 44.1779, 44.2011, 44.2243, 44.2475, 44.2707, 44.2939, 44.3171, 44.3403, 44.3635, 44.3867, 44.4099, 44.4331, 44.4563, 44.4795, 44.5026, 44.5258, 44.549, 44.5722, 44.5954, 44.6186, 44.6418, 44.665, 44.6882, 44.7114, 44.7346, 44.7578, 44.781, 44.8042, 44.8274, 44.8506, 44.8738, 44.897, 44.9202, 44.9434, 44.9666, 44.9898, 45.013, 45.0362, 45.0594, 45.0826, 45.1058, 45.1289, 45.1521, 45.1753, 45.1985, 45.2217, 45.2449, 45.2681, 45.2913, 45.3145, 45.3377, 45.3609, 45.3841, 45.4073, 45.4305, 45.4537, 45.4769, 45.5001, 45.5233, 45.5465, 45.5697, 45.5929, 45.6161, 45.6393, 45.6625, 45.6857, 45.7089, 45.7321, 45.7552, 45.7784, 45.8016, 45.8248, 45.848, 45.8712, 45.8944, 45.9176, 45.9408, 45.964, 45.9872, 46.0104, 46.0336, 46.0568, 46.08, 46.1032, 46.1264, 46.1496, 46.1728, 46.196, 46.2192, 46.2424, 46.2656, 46.2888, 46.312, 46.3352, 46.3584, 46.3815, 46.4047, 46.4279, 46.4511, 46.4743, 46.4975, 46.5207, 46.5439, 46.5671, 46.5903, 46.6135, 46.6367, 46.6599, 46.6831, 46.7063, 46.7295, 46.7527, 46.7759, 46.7991, 46.8223, 46.8455, 46.8687, 46.8919, 46.9151, 46.9383, 46.9615, 46.9846, 47.0078, 47.031, 47.0542, 47.0774, 47.1006, 47.1238, 47.147, 47.1702, 47.1934, 47.2166, 47.2398, 47.263, 47.2862, 47.3094, 47.3326, 47.3558, 47.379, 47.4022, 47.4254, 47.4486, 47.4718, 47.495, 47.5182, 47.5414, 47.5646, 47.5878, 47.6109, 47.6341, 47.6573, 47.6805, 47.7037, 47.7269, 47.7501, 47.7733, 47.7965, 47.8197, 47.8429, 47.8661, 47.8893, 47.9125, 47.9357, 47.9589, 47.9821, 48.0053, 48.0285, 48.0517, 48.0749, 48.0981, 48.1213, 48.1445, 48.1677, 48.1909, 48.2141, 48.2372, 48.2604, 48.2836, 48.3068, 48.33, 48.3532, 48.3764, 48.3996, 48.4228, 48.446, 48.4692, 48.4924, 48.5156, 48.5388}
;                                                                                                       //PROGMEM const float yg dimasukkan array (PROGMEM AGAR MEMORI CUKUP) 
/*****************************
        END OF 
  SETUP UNTUK NILAI ADC VOLT
******************************/ 

/***************
  MILIS SETTING
 ***************/
unsigned long calculatingMillis = 0 ; //menyimpan waktu untuk mengkalkulasi millis
unsigned long previousMillis = 0;    //Menyimpan waktu terakhir di update 
long interval_nilaiADC = 1000;      //interval untuk menghitung ADC 1s
long interval_TimeAVG = 10;         //interval untuk menghitung ADC        

/*********************
  END OF MILIS SETTING
 *********************/

 
/*******************
 SERIAL I2C SETTING
 KEYPAD
 LiquidCrystal_I2C
 *******************/
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>

const byte ROWS = 4;
const byte COLS = 4;
char hexaKeys[ROWS][COLS] = {           //Define Keypad Layout
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {5, 4, 3, 2}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS );

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); //i2C bus uses 
long current_time ; 
/*******************
      END OF
 SERIAL I2C SETTING
 KEYPAD
 LiquidCrystal_I2C
 *******************/

/**************
 PID CONTROLLER
 **************/
#include <PID_v1.h>
#define RELAY 10  
double inputPID;
double setpointPID; 
//Specify the links and initial tuning parameters
double kp = 9.10; double ki = 0.01; double kd = 1.9; 
PID myPID(&inputPID, &outputPID, &setpointPID, kp,ki,kd , DIRECT); //input,output,set , kp, ki, kd, direct 

int periode = 2000;
unsigned long startTime;
/*********************
 END OF PID CONTROLLER
 ****************** ***/
 double temp ;
   int loops ;
unsigned long currentMillis; 
int counter = 0; 
void setup() {
  Serial.begin(9600);   
  
  lcd.begin(16,2);                      //Starts LCD (x row, y column) 
  lcd.backlight();                      //Turn on backlight
  lcd.clear();                          //Clears LCD
  lcd.setCursor(0,0);                   //Move cursor (x right, y down)
  Serial.println("CLEARDATA"); //clears up any data left from previous projects

  Serial.println("LABEL,Suhu,Waktu"); //always write LABEL, so excel knows the next things will be the names of the columns (instead of Acolumn you could write Time for instance)

  Serial.println("RESETTIMER"); //resets timer to 0
  
  pinMode(10, OUTPUT);
  pinMode(A0, INPUT);          
   //PID
    startTime = millis();
    
    //tell the PID to range between 0 and the full window size
    myPID.SetOutputLimits(0, periode);

    //turn the PID on
    myPID.SetMode(AUTOMATIC);
  lcd.print("READY");                   //Signal for ready   
}

void loop() {       
 
   currentMillis = millis();                                                             // to check the time 
   
   if (currentMillis - previousMillis > interval_TimeAVG ){                                                                                                                                                                                                          
   previousMillis = currentMillis;   //mengenalkan variabel nilaiADC
   nilaiADC += analogRead(voltPin);   //read input pin dalam bit dan menambahnya terus
   counter = counter + 1; 
   if (counter >= 20 ){
   rataADC = nilaiADC/20; 
   hasilTEMP = pgm_read_float_near(ADC_TO_TEMP + rataADC); 
   nilaiADC = 0 ;  
   counter=0; 
   }                  
   }
    
    //mengeluarkan hasil float
   Serial.print("Temperature saat ini = ");Serial.print(hasilTEMP);Serial.println(" derajat celcius"); 
   lcd.setCursor(0,0);lcd.print("Tcur  : ");lcd.print(hasilTEMP);                                      //Output for temp reading 
   lcd.setCursor(0,1);lcd.print("Tset  : ");lcd.print(targetTEMP);                                     //Output analog reading
   
   
   //KEYPAD 
   
   char Key =keypad.getKey();
   if (Key == 'A'){                                                             //When "Enter" button is pushed 
    lcd.clear();
   KeyInput:                                                                    //Goto start of KeyInput
    lcd.setCursor(8,1);lcd.print("  ");                                        //Clear bottom line
    int data_count = 0;                                                        //Reset data_count
    do{
      Key = keypad.getKey();                                                      //Get Key from Keypad
      if (isdigit(Key)){                                                          //Check for input
        inputTEMP[data_count] = Key;                                              //Get input into char array
        lcd.setCursor(data_count,1);lcd.print(inputTEMP[data_count]);             //Output Key on LCD
        data_count++;                                                          
      }
     }while(data_count <2);
     keypadTEMP = atoi(inputTEMP);                                                  //Convert Char array to Integer
     if (keypadTEMP > 48 || keypadTEMP < 24){                                      //Check for invalid input
         currentMillis = millis();
         lcd.setCursor(0,1);lcd.print("ERROR");
         while(millis() < currentMillis + 2000);
         goto KeyInput;
     }
     targetTEMP = keypadTEMP;
   }
   if (Key == 'B'){
      lcd.clear();
      lcd.setCursor(0,0);lcd.print("PRESS A");                                      //Output for temp reading 
      lcd.setCursor(0,1);lcd.print("FOR TEMP SET");                                     //Output analog reading
   }
   if (Key == 'C'){
      lcd.clear();
      lcd.setCursor(0,0);lcd.print("PRESS A");                                      //Output for temp reading 
      lcd.setCursor(0,1);lcd.print("FOR TEMP SET");                                     //Output analog reading
   }
//output to excel 
 CTexcel = millis();
              if (CTexcel - PTexcel >= ITexcel) {
              PTexcel = CTexcel;
              Serial.print("DATA,");
              Serial.print(hasilTEMP);
              Serial.print(",");
              Serial.print("TIMER");
              Serial.print(",");
              Serial.println();
              }
 
//PID 
if(targetTEMP <= 35){
  kp = 8.82;
}
if(targetTEMP <= 40){
  kp = 9.22;
}
if(targetTEMP <= 45){
  kp = 8.67;
}
  myPID.Compute();
  inputPID = (int) (((hasilTEMP-24.809)/23.7298)*1024); 
  setpointPID = (int) (((targetTEMP-24.809)/23.7298)*1024); 
  /************************************************
   * turn the output pin on/off based on pid output
   ************************************************/
  if (millis() - startTime > periode)
  { //time to shift the Relay Window
    startTime += periode;
  }
  if (outputPID < millis() - startTime) 
  {
    digitalWrite(RELAY,HIGH);    //Turn off heater
  }
  else 
  {
    digitalWrite(RELAY,LOW);    //Turn on heater
  }
  Serial.println(outputPID);
}
